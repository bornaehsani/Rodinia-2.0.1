-include localConfig

RODINIA_BASE_DIR ?= $(HOME)/code/rodinia_2.0.1

-include $(RODINIA_BASE_DIR)/common/localConfig

CUDA_BIN_DIR := $(RODINIA_BASE_DIR)/bin/linux/cuda
OMP_BIN_DIR := $(RODINIA_BASE_DIR)/bin/linux/omp
OCL_BIN_DIR := $(RODINIA_BASE_DIR)/bin/linux/opencl

install_perms ?=0755

# C compiler
CC=gcc
CXX=g++
CC_FLAGS ?=
CXX_FLAGS ?=
CC_LINK_FLAGS ?=
CXX_LINK_FLAGS ?=

ifeq ($(prof),1)
CC_FLAGS += -pg
CXX_FLAGS += -pg
CC_LINK_FLAGS += -pg
CXX_LINK_FLAGS += -pg
NVCC_FLAGS += -pg
endif

CXX_LINK ?=$(CXX) $(CXX_LINK_FLAGS)

#OMP_LIB ?= -lgomp
OMP_FLAG ?= -fopenmp
CC_OMP ?=$(CC) $(CC_FLAGS) $(OMP_FLAG)
CC_OMP_LINK ?= $(CC_OMP) $(CC_LINK_FLAGS)

CXX_OMP ?=$(CXX) $(CXX_FLAGS) $(OMP_FLAG)
CXX_OMP_LINK ?=$(CXX_OMP) $(CXX_LINK_FLAGS)

OMP_NUM_THREADS ?= 4

# CUDA toolkit installation path
CUDA_DIR ?= /usr/local/cuda4.0

# CUDA compiler
NVCC ?= $(CUDA_DIR)/bin/nvcc
CUDA_ARCH ?= -arch=sm_20
NVCC_FLAGS ?= -I$(CUDA_DIR)/include -Xptxas -v $(CUDA_ARCH)

NVCC_OBJ ?=$(NVCC) $(NVCC_FLAGS)
NVCC_LINK ?=$(NVCC_OBJ) --link $(CC_LINK_FLAGS) -L$(CUDA_LIB_DIR) 

# 'make dbg=1' enables NVCC debugging
DEBUG_FLAGS ?= -g -O2 -D_DEBUG
OPT_FLAGS ?= -O3
ifeq ($(dbg),1)
	NVCC_FLAGS +=$(DEBUG_FLAGS)
	CC_FLAGS +=$(DEBUG_FLAGS)
	CXX_FLAGS +=$(DEBUG_FLAGS)
	OPENACC_FLAGS +=$(DEBUG_FLAGS)
else
	CXX_FLAGS +=$(OPT_FLAGS)
	CC_FLAGS +=$(OPT_FLAGS)
	NVCC_FLAGS +=$(OPT_FLAGS)
	OPENACC_FLAGS +=$(OPT_FLAGS)
endif

# 'make emu=1' compiles the CUDA kernels for emulation
ifeq ($(emu),1)
	NVCC_FLAGS += -deviceemu
endif

# CUDA toolkit libraries
CUDA_LIB_DIR := $(CUDA_DIR)/lib
ifeq ($(shell uname -m), x86_64)
     ifeq ($(shell if test -d $(CUDA_DIR)/lib64; then echo T; else echo F; fi), T)
     	CUDA_LIB_DIR := $(CUDA_DIR)/lib64
     endif
endif

# CUDA SDK installation path
#SDK_DIR = $(HOME)/NVIDIA_GPU_Computing_SDK/C
SDK_DIR?=$(HOME)/NVIDIA_CUDA_SDK

NVCC_FLAGS += -I$(SDK_DIR)/C/common/inc/

# Determine the correct version of the cutil library
#CUTIL_LIB = -lcutil
#ifeq ($(shell uname -m), x86_64)
#     ifeq ($(shell if test -e $(SDK_DIR)/lib/libcutil_x86_64.a; then echo T; else echo F; fi), T)
#        CUTIL_LIB = -lcutil_x86_64
#     endif
#endif
CUTIL_LIB?=$(SDK_DIR)/C/lib/libcutil_x86_64.a

# OPENCL

# NVIDIA_DIR

OPENCL_DIR ?=$(SDK_DIR)
OPENCL_INC = $(OPENCL_DIR)/OpenCL/common/inc
OPENCL_LIB = $(OPENCL_DIR)/OpenCL/common/lib

OCL_OBJ ?=$(NVCC) $(CC_FLAGS) $(OPENCL_FLAGS) -I$(OPENCL_INC)
OCL_LINK ?=$(OCL_OBJ) -L$(OPENCL_LIB) -lOpenCL

# AMD_DIR
#OPENCL_DIR = /home/sc5nf/ati-stream-sdk-v2.2-lnx64/
#OPENCL_DIR = /home/mwb7w/AMD-APP-SDK-v2.5-RC2-lnx64
#OPENCL_INC = $(OPENCL_DIR)/include/ 
#OPENCL_LIB = $(OPENCL_DIR)/lib/x86/
#ifeq ($(shell uname -m), x86_64)
#     ifeq ($(shell if test -d $(OPENCL_DIR)/lib/x86_64/; then echo T; else echo F; fi), T)
#     	OPENCL_LIB = $(OPENCL_DIR)/lib/x86_64/
#     endif
#endif

pgi_nv_arch?=cc20
pgi_cuda_ver?=cuda4.0

PGCC_FLAGS?=-fast -fastsse -tp=nehalem-64 -Msafeptr=all -Minfo=accel,loop,lre,par,vect
PGCC_GPU_FLAGS?=-ta=nvidia:$(pgi_nv_arch),time -Mcuda=$(pgi_cuda_ver) 

#NVCC?=/usr/local/cuda4.1/bin/nvcc
NVCC4.0?=/usr/local/cuda4.0/bin/nvcc
NVCC4.1?=/usr/local/cuda4.1/bin/nvcc

PGCC_DIR       ?=/opt/pgi/linux86-64/2012
OPENACC_FLAGS      += $(PGCC_FLAGS)
OPENACC_CC         =$(PGCC_DIR)/bin/pgcc $(OPENACC_FLAGS) $(PGCC_GPU_FLAGS) -acc
OPENACC_CXX =$(PGCC_DIR)/bin/pgc++ $(OPENACC_FLAGS)
# $(PGCC_GPU_FLAGS) -acc
OPENACC_LINK_FLAGS = $(CC_LINK_FLAGS)
OPENACC_CC_LINK    =$(OPENACC_CC) $(OPENACC_LINK_FLAGS)
OPENACC_CXX_LINK   =$(OPENACC_CXX) $(OPENACC_LINK_FLAGS)
